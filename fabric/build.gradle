plugins {
    id 'fabric-loom'
    id 'java'
    id 'maven-publish'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

base {
    archivesName = "${mod_archives_name}-fabric-${minecraft_version}-${mod_version}"
}

repositories {
    mavenCentral()
    maven { url 'https://www.cursemaven.com' }
}

def commonSrcDir = "${project.buildDir}/classes/generated/main"

project.delete(fileTree(dir: commonSrcDir))

project(':common') {
    task replaceFabricAnnotations(type: Copy) {
        from 'src/main/java'
        into commonSrcDir
        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        filter {
            String line ->  line.replaceAll('@OnlyIn', '@Environment')
                    .replaceAll('Dist.CLIENT', 'EnvType.CLIENT')
                    .replaceAll('com.mlib.annotation.Dist', 'net.fabricmc.api.EnvType')
                    .replaceAll('com.mlib.annotation.OnlyIn', 'net.fabricmc.api.Environment')
        }
    }

    tasks.withType(JavaCompile) {
        dependsOn replaceFabricAnnotations
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    compileOnly project(':common')
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : '4',
                "Implementation-Title"    : mod_display_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

loom {
    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }
    runs {
        client {
            client()
            setConfigName('fabric client')
            ideConfigGenerated(true)
            runDir('runs/client')
            programArg('--username=Dev')
        }
        server {
            server()
            setConfigName('fabric server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
    accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")
}

tasks.withType(JavaCompile).configureEach {
    options.setEncoding('UTF-8')
    options.release.set(17)
    source(commonSrcDir)
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

processResources {
    from project(':common').sourceSets.main.resources
    filesMatching('fabric.mod.json') {
        expand project.properties
    }
    outputs.upToDateWhen {
        false
    }
}

